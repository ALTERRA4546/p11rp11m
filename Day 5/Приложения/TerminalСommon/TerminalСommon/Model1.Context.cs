//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TerminalСommon
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HranitelProEntities : DbContext
    {
        public HranitelProEntities()
            : base("name=HranitelProEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Авторизация> Авторизация { get; set; }
        public virtual DbSet<Группа> Группа { get; set; }
        public virtual DbSet<Заявка> Заявка { get; set; }
        public virtual DbSet<Организация> Организация { get; set; }
        public virtual DbSet<Отдел> Отдел { get; set; }
        public virtual DbSet<Подразделение> Подразделение { get; set; }
        public virtual DbSet<Посетитель> Посетитель { get; set; }
        public virtual DbSet<Посещающие> Посещающие { get; set; }
        public virtual DbSet<Пропуск> Пропуск { get; set; }
        public virtual DbSet<Сотрудник> Сотрудник { get; set; }
        public virtual DbSet<Статус> Статус { get; set; }
        public virtual DbSet<Тип_заявки> Тип_заявки { get; set; }
        public virtual DbSet<Черный_список> Черный_список { get; set; }
    
        public virtual ObjectResult<Autorisation_Result> Autorisation(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Autorisation_Result>("Autorisation", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<OrderFiltration_Result> OrderFiltration(string type, string podrazdelenie, string status)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var podrazdelenieParameter = podrazdelenie != null ?
                new ObjectParameter("Podrazdelenie", podrazdelenie) :
                new ObjectParameter("Podrazdelenie", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderFiltration_Result>("OrderFiltration", typeParameter, podrazdelenieParameter, statusParameter);
        }
    
        public virtual int Registration(string family, string name, string otchestvo, string phone, string email, string organisation, string birthday, Nullable<int> series, Nullable<int> number, string login, string password)
        {
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var otchestvoParameter = otchestvo != null ?
                new ObjectParameter("Otchestvo", otchestvo) :
                new ObjectParameter("Otchestvo", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var organisationParameter = organisation != null ?
                new ObjectParameter("Organisation", organisation) :
                new ObjectParameter("Organisation", typeof(string));
    
            var birthdayParameter = birthday != null ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(string));
    
            var seriesParameter = series.HasValue ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registration", familyParameter, nameParameter, otchestvoParameter, phoneParameter, emailParameter, organisationParameter, birthdayParameter, seriesParameter, numberParameter, loginParameter, passwordParameter);
        }
    }
}
